<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Real-Time Taxi Tracker</title>
    <link rel="stylesheet" href="styles.css" />
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
    />
  </head>
  <body>
    <h1>Real-Time Taxi Tracking</h1>
    <div id="map"></div>

    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script>
      const map = L.map("map").setView([25.0961, 85.3131], 9); 
      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution: "Â© OpenStreetMap contributors",
      }).addTo(map);

      let taxiMarkers = {}; 

      async function fetchTaxis() {
        try {
          const response = await fetch("http://localhost:3000/get_cabs");
          if (!response.ok) throw new Error("Network response was not ok");

          const data = await response.json();
          console.log("Received Taxi Data:", data);

          data.data.forEach((taxi) => {
            const { cab_reg, city, gps_data } = taxi; 

            let lat, lng;

            try {
              const parsedGPS = JSON.parse(gps_data);

              if (parsedGPS.current_loc) {
                lat = parseFloat(parsedGPS.current_loc.latitude);
                lng = parseFloat(parsedGPS.current_loc.longitude);
              }
            } catch (error) {
              console.warn(
                `Error parsing GPS data for taxi: ${cab_reg}`,
                error
              );
            }
            if (!isNaN(lat) && !isNaN(lng)) {
              if (taxiMarkers[cab_reg]) {
                taxiMarkers[cab_reg].setLatLng([lat, lng]);
              } else {
                taxiMarkers[cab_reg] = L.marker([lat, lng], {
                  icon: L.divIcon({
                    html: "ðŸš–",
                    className: "",
                    iconSize: [20, 20],
                  }),
                })
                  .addTo(map)
                  .bindPopup(`ðŸš– ${cab_reg} - ${city}`);
              }
            } else {
              console.warn(`Invalid GPS Data for taxi: ${cab_reg}`, taxi);
            }
          });
        } catch (error) {
          console.error("Error fetching taxi data:", error);
        } finally {
          setTimeout(fetchTaxis, 5000);
        }
      }

      fetchTaxis();
    </script>
  </body>
</html>



index.html

import express from "express";
import cors from "cors";
import fetch from "node-fetch";
import path from "path";
import { fileURLToPath } from "url";

const app = express();
app.use(cors());

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

app.use(express.static(__dirname));

app.get("/get_cabs", async (req, res) => {
    try {
        const response = await fetch("https://rodbez.in/account_api/v0/get_moving_cabs", {
            method: "POST",
            headers: {
                "Authorization": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0aW1lIjoxNzM5MzQ3NzE1LCJhcGlfa2V5IjoibXlkcmVhbSIsImFkbWluX3JvbGUiOiJhY2NvdW50IiwiYWRtaW5faWQiOiI0OSIsImFkbWluX25hbWUiOiJNdXJhcmkiLCJBUElfVElNRSI6MTczOTM0NzcxNX0.vt4U_e2XbtbLQOafVtG7LRjIbEH7MTq_OeYnfkRbWgY",
                "Cookie": "ci_session=fbbf6196c1025ffcb4571a51c5e505dc8dcd4397"
            },
            body: new URLSearchParams({ category: "Operational" })
        });

        const data = await response.json();
        res.json(data);
    } catch (error) {
        console.error("Error fetching taxi data:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
});

app.get("/", (req, res) => {
    res.sendFile(path.join(__dirname, "index.html"));
});

const PORT = 3000;
app.listen(PORT, () => {
    console.log(`âœ… Server running on http://localhost:${PORT}`);
});


server.js

body {
    font-family: Arial, sans-serif;
    text-align: center;
}

#map {
    width: 80%;
    height: 500px;
    margin: auto;
    border-radius: 10px;
    border: 2px solid #333;
}


styles.css

